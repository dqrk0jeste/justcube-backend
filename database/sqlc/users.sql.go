// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, username, password_hash, email)
VALUES ($1, $2, $3, $4)
RETURNING id, username, password_hash, email, created_at
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password_hash, email, created_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, email, created_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersByUsername = `-- name: GetUsersByUsername :many
SELECT id, username, password_hash, email, created_at FROM users
WHERE username LIKE $3
ORDER BY username ASC
LIMIT $1 OFFSET $2
`

type GetUsersByUsernameParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Input  string `json:"input"`
}

func (q *Queries) GetUsersByUsername(ctx context.Context, arg GetUsersByUsernameParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByUsername, arg.Limit, arg.Offset, arg.Input)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $1, password_hash = $2
WHERE id = $3
RETURNING id, username, password_hash, email, created_at
`

type UpdateUserParams struct {
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Username, arg.PasswordHash, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateUsersPassword = `-- name: UpdateUsersPassword :one
UPDATE users
SET password_hash = $1
WHERE id = $2
RETURNING id, username, password_hash, email, created_at
`

type UpdateUsersPasswordParams struct {
	PasswordHash string    `json:"password_hash"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUsersPassword(ctx context.Context, arg UpdateUsersPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsersPassword, arg.PasswordHash, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateUsersUsername = `-- name: UpdateUsersUsername :one
UPDATE users
SET username = $1
WHERE id = $2
RETURNING id, username, password_hash, email, created_at
`

type UpdateUsersUsernameParams struct {
	Username string    `json:"username"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUsersUsername(ctx context.Context, arg UpdateUsersUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsersUsername, arg.Username, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
