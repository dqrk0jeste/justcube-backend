// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, username, password_hash, profile_image)
VALUES ($1, $2, $3, $4)
RETURNING id, username, password_hash, profile_image
`

type CreateUserParams struct {
	ID           uuid.UUID      `json:"id"`
	Username     string         `json:"username"`
	PasswordHash string         `json:"password_hash"`
	ProfileImage sql.NullString `json:"profile_image"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.ProfileImage,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.ProfileImage,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password_hash, profile_image FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.ProfileImage,
	)
	return i, err
}

const getUsersByUsername = `-- name: GetUsersByUsername :many
SELECT id, username, password_hash, profile_image FROM users
WHERE username LIKE $3
ORDER BY username ASC
LIMIT $1 OFFSET $2
`

type GetUsersByUsernameParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Input  string `json:"input"`
}

func (q *Queries) GetUsersByUsername(ctx context.Context, arg GetUsersByUsernameParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByUsername, arg.Limit, arg.Offset, arg.Input)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.ProfileImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
