// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const followUser = `-- name: FollowUser :one
INSERT INTO follows(user_id, followed_user_id)
VALUES ($1, $2)
RETURNING user_id, followed_user_id, created_at
`

type FollowUserParams struct {
	UserID         uuid.UUID `json:"user_id"`
	FollowedUserID uuid.UUID `json:"followed_user_id"`
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, followUser, arg.UserID, arg.FollowedUserID)
	var i Follow
	err := row.Scan(&i.UserID, &i.FollowedUserID, &i.CreatedAt)
	return i, err
}

const getFollowing = `-- name: GetFollowing :many
SELECT user_id, followed_user_id, follows.created_at, followed_users.id, followed_users.username, followed_users.password_hash, followed_users.created_at, following_users.id, following_users.username, following_users.password_hash, following_users.created_at, count(user_id) FROM follows
INNER JOIN users as followed_users on follows.followed_user_id = users.id
INNER JOIN users as following_users on follows.user_id = users.id
WHERE follows.user_id = $1
`

type GetFollowingRow struct {
	UserID         uuid.UUID `json:"user_id"`
	FollowedUserID uuid.UUID `json:"followed_user_id"`
	CreatedAt      time.Time `json:"created_at"`
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	PasswordHash   string    `json:"password_hash"`
	CreatedAt_2    time.Time `json:"created_at_2"`
	ID_2           uuid.UUID `json:"id_2"`
	Username_2     string    `json:"username_2"`
	PasswordHash_2 string    `json:"password_hash_2"`
	CreatedAt_3    time.Time `json:"created_at_3"`
	Count          int64     `json:"count"`
}

func (q *Queries) GetFollowing(ctx context.Context, userID uuid.UUID) ([]GetFollowingRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowingRow{}
	for rows.Next() {
		var i GetFollowingRow
		if err := rows.Scan(
			&i.UserID,
			&i.FollowedUserID,
			&i.CreatedAt,
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.CreatedAt_2,
			&i.ID_2,
			&i.Username_2,
			&i.PasswordHash_2,
			&i.CreatedAt_3,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollows = `-- name: GetFollows :many
SELECT user_id, followed_user_id, follows.created_at, followed_users.id, followed_users.username, followed_users.password_hash, followed_users.created_at, following_users.id, following_users.username, following_users.password_hash, following_users.created_at, count(followed_user_id) FROM follows
INNER JOIN users as followed_users on follows.followed_user_id = users.id
INNER JOIN users as following_users on follows.user_id = users.id
WHERE follows.followed_user_id = $1
`

type GetFollowsRow struct {
	UserID         uuid.UUID `json:"user_id"`
	FollowedUserID uuid.UUID `json:"followed_user_id"`
	CreatedAt      time.Time `json:"created_at"`
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	PasswordHash   string    `json:"password_hash"`
	CreatedAt_2    time.Time `json:"created_at_2"`
	ID_2           uuid.UUID `json:"id_2"`
	Username_2     string    `json:"username_2"`
	PasswordHash_2 string    `json:"password_hash_2"`
	CreatedAt_3    time.Time `json:"created_at_3"`
	Count          int64     `json:"count"`
}

func (q *Queries) GetFollows(ctx context.Context, followedUserID uuid.UUID) ([]GetFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollows, followedUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowsRow{}
	for rows.Next() {
		var i GetFollowsRow
		if err := rows.Scan(
			&i.UserID,
			&i.FollowedUserID,
			&i.CreatedAt,
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.CreatedAt_2,
			&i.ID_2,
			&i.Username_2,
			&i.PasswordHash_2,
			&i.CreatedAt_3,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follows WHERE user_id = $1 AND followed_user_id = $2
`

type UnfollowUserParams struct {
	UserID         uuid.UUID `json:"user_id"`
	FollowedUserID uuid.UUID `json:"followed_user_id"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.ExecContext(ctx, unfollowUser, arg.UserID, arg.FollowedUserID)
	return err
}
