// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const followUser = `-- name: FollowUser :one
INSERT INTO follows(user_id, followed_user_id)
VALUES ($1, $2)
RETURNING user_id, followed_user_id, created_at
`

type FollowUserParams struct {
	UserID         uuid.UUID `json:"user_id"`
	FollowedUserID uuid.UUID `json:"followed_user_id"`
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, followUser, arg.UserID, arg.FollowedUserID)
	var i Follow
	err := row.Scan(&i.UserID, &i.FollowedUserID, &i.CreatedAt)
	return i, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT following_users.id, following_users.username, following_users.password_hash, following_users.email, following_users.created_at FROM follows
INNER JOIN users as followed_users on follows.followed_user_id = followed_users.id
INNER JOIN users as following_users on follows.user_id = following_users.id
WHERE follows.followed_user_id = $1
LIMIT $2 OFFSET $3
`

type GetFollowersParams struct {
	FollowedUserID uuid.UUID `json:"followed_user_id"`
	Limit          int32     `json:"limit"`
	Offset         int32     `json:"offset"`
}

func (q *Queries) GetFollowers(ctx context.Context, arg GetFollowersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, arg.FollowedUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersCount = `-- name: GetFollowersCount :one
SELECT count(followed_user_id) FROM follows WHERE followed_user_id = $1
`

func (q *Queries) GetFollowersCount(ctx context.Context, followedUserID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFollowersCount, followedUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFollowing = `-- name: GetFollowing :many
SELECT followed_users.id, followed_users.username, followed_users.password_hash, followed_users.email, followed_users.created_at FROM follows
INNER JOIN users as followed_users on follows.followed_user_id = followed_users.id
INNER JOIN users as following_users on follows.user_id = following_users.id
WHERE follows.user_id = $1
LIMIT $2 OFFSET $3
`

type GetFollowingParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetFollowing(ctx context.Context, arg GetFollowingParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingCount = `-- name: GetFollowingCount :one
SELECT count(user_id) FROM follows WHERE user_id = $1
`

func (q *Queries) GetFollowingCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFollowingCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follows WHERE user_id = $1 AND followed_user_id = $2
`

type UnfollowUserParams struct {
	UserID         uuid.UUID `json:"user_id"`
	FollowedUserID uuid.UUID `json:"followed_user_id"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.ExecContext(ctx, unfollowUser, arg.UserID, arg.FollowedUserID)
	return err
}
