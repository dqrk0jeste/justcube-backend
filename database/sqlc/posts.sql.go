// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(id, text_content, image_count, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, text_content, image_count, user_id, created_at
`

type CreatePostParams struct {
	ID          uuid.UUID `json:"id"`
	TextContent string    `json:"text_content"`
	ImageCount  int32     `json:"image_count"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.TextContent,
		arg.ImageCount,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.TextContent,
		&i.ImageCount,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getFeed = `-- name: GetFeed :many
SELECT posts.id, text_content, image_count, user_id, posts.created_at, users.id, username, password_hash, email, users.created_at
FROM posts
INNER JOIN users ON posts.user_id = users.id
WHERE user_id IN (
  SELECT followed_user.id
  FROM follows
  INNER JOIN users as followed_user ON followed_user.id = follows.followed_user_id
  WHERE follows.user_id = $1
)
ORDER BY posts.created_at DESC
LIMIT $2 OFFSET $3
`

type GetFeedParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type GetFeedRow struct {
	ID           uuid.UUID `json:"id"`
	TextContent  string    `json:"text_content"`
	ImageCount   int32     `json:"image_count"`
	UserID       uuid.UUID `json:"user_id"`
	CreatedAt    time.Time `json:"created_at"`
	ID_2         uuid.UUID `json:"id_2"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	CreatedAt_2  time.Time `json:"created_at_2"`
}

func (q *Queries) GetFeed(ctx context.Context, arg GetFeedParams) ([]GetFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeed, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFeedRow{}
	for rows.Next() {
		var i GetFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.TextContent,
			&i.ImageCount,
			&i.UserID,
			&i.CreatedAt,
			&i.ID_2,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuestFeed = `-- name: GetGuestFeed :many
SELECT posts.id, text_content, image_count, user_id, posts.created_at, users.id, username, password_hash, email, users.created_at
FROM posts
INNER JOIN users ON posts.user_id = users.id
ORDER BY posts.created_at DESC
LIMIT $1 OFFSET $2
`

type GetGuestFeedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetGuestFeedRow struct {
	ID           uuid.UUID `json:"id"`
	TextContent  string    `json:"text_content"`
	ImageCount   int32     `json:"image_count"`
	UserID       uuid.UUID `json:"user_id"`
	CreatedAt    time.Time `json:"created_at"`
	ID_2         uuid.UUID `json:"id_2"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	CreatedAt_2  time.Time `json:"created_at_2"`
}

func (q *Queries) GetGuestFeed(ctx context.Context, arg GetGuestFeedParams) ([]GetGuestFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getGuestFeed, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGuestFeedRow{}
	for rows.Next() {
		var i GetGuestFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.TextContent,
			&i.ImageCount,
			&i.UserID,
			&i.CreatedAt,
			&i.ID_2,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT posts.id, text_content, image_count, user_id, posts.created_at, users.id, username, password_hash, email, users.created_at
FROM posts
INNER JOIN users ON posts.user_id = users.id
WHERE posts.id = $1
LIMIT 1
`

type GetPostByIdRow struct {
	ID           uuid.UUID `json:"id"`
	TextContent  string    `json:"text_content"`
	ImageCount   int32     `json:"image_count"`
	UserID       uuid.UUID `json:"user_id"`
	CreatedAt    time.Time `json:"created_at"`
	ID_2         uuid.UUID `json:"id_2"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	CreatedAt_2  time.Time `json:"created_at_2"`
}

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (GetPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.TextContent,
		&i.ImageCount,
		&i.UserID,
		&i.CreatedAt,
		&i.ID_2,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt_2,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT posts.id, text_content, image_count, user_id, posts.created_at, users.id, username, password_hash, email, users.created_at
FROM posts
INNER JOIN users ON posts.user_id = users.id
WHERE user_id = $1
ORDER BY posts.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPostsByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type GetPostsByUserRow struct {
	ID           uuid.UUID `json:"id"`
	TextContent  string    `json:"text_content"`
	ImageCount   int32     `json:"image_count"`
	UserID       uuid.UUID `json:"user_id"`
	CreatedAt    time.Time `json:"created_at"`
	ID_2         uuid.UUID `json:"id_2"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	CreatedAt_2  time.Time `json:"created_at_2"`
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]GetPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsByUserRow{}
	for rows.Next() {
		var i GetPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.TextContent,
			&i.ImageCount,
			&i.UserID,
			&i.CreatedAt,
			&i.ID_2,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
